%% COMPUTE WHOLE BRAIN DFA IN SOURCE SPACE
% pupmod_src_powcorr_pup

clear all

% --------------------------------------------------------
% VERSION 1
% --------------------------------------------------------
v               = 1;
v_grid          = 4; % 4 = aal
fsample         = 400;
SUBJLIST        = [4 5 6 7 8 9 10 11 12 13 15 16 19 20 21 22 23 24];
allpara.filt    = 'eloreta';
allpara.grid    = 'aal';
foi_range       = unique(round(2.^[1:.5:7]));
para.smo        = foi_range./4;
para.segleng    = 1 ./ para.smo;
lpc             = 0;
v_pup           = 10;
% --------------------------------------------------------

restoredefaultpath

addpath /home/gnolte/meg_toolbox/toolbox/
addpath /home/gnolte/meg_toolbox/fieldtrip_utilities/
addpath /home/gnolte/meg_toolbox/toolbox_nightly/
addpath /home/gnolte/meg_toolbox/meg/
addpath /home/tpfeffer/Documents/MATLAB/fieldtrip-20130925/
addpath /home/tpfeffer/Documents/MATLAB/toolboxes/NBT-ReleaseNBTRC4a/
addpath ~/pconn/matlab

ft_defaults

indir   = '/home/tpfeffer/pconn/proc/src/';
outdir   = '/home/tpfeffer/pupmod/proc/';
freq = 1;
run ~/Documents/MATLAB/toolboxes/NBT-NBTv0.5.3-alpha/installNBT.m
%%

for ifoi = 1 : length(foi_range)
  for m = 1 : 3
    for isubj = SUBJLIST
      
      if ~exist(sprintf([outdir 'pupmod_src_powcorr_pup_s%d_m%d_f%d_v%d_processing.txt'],isubj,m,ifoi,v))
        system(['touch ' outdir sprintf('pupmod_src_powcorr_pup_s%d_m%d_f%d_v%d_processing.txt',isubj,m,ifoi,v)]);
      else
        continue
      end
      %
      % ---------------------------------------------------
      % READ IN PUPIL
      % ---------------------------------------------------
      
      d=dir(['/home/tpfeffer/pconn/proc/pup/' sprintf('pconn_postproc_pupdfa_s%d_b*_m%d_v%d.mat',isubj,m,v_pup)]);
      
      if length(d)<1
        num_blocks(isubj,m) = 0;
        continue
      elseif length(d)==1 && str2double(d(1).name(end-10)) == 1
        num_blocks(isubj,m) = 1;
        bl = 1;
        warning(sprintf('only one block which is b%d',bl));
      elseif  length(d)==1 && str2double(d(1).name(end-10)) == 2
        num_blocks(isubj,m) = 2;
        bl = 2;
      else
        num_blocks(isubj,m) = 2;
        bl = 1;
      end
      disp(sprintf('Processing s%d m%d f%d ...', isubj,m,ifoi))
      
      
      for iblock = bl : num_blocks(isubj,m)
        
        disp(sprintf('Loading MEG data ...'));

        load(sprintf('~/pconn/proc/pup/pconn_postproc_pupdfa_s%d_b%d_m%d_v%d.mat',isubj,iblock,m,v_pup))

        if size(dat,2)>size(dat,1)
          dat = dat';
        end
        
        pup.dil=tp_interp_blinks(pup.dil);
                
        pars = [];
        
        pars.fsample   = 400;
        pars.segleng   = round(para.segleng(ifoi).*fsample);
        pars.segshift  = round(fsample*para.segleng(ifoi)/2);
        pars.foi       = foi_range(ifoi);
        pars.epleng    = size(dat,1);
        
        cs = data2cs_wavelet(dat,pars.segleng,pars.segshift,pars.epleng,pars.foi,pars.fsample);
        
        % get spatial filter
        pars = [];
        pars.grid = allpara.grid;
        pars.sa   = sprintf('~/pconn/proc/src/pconn_sa_s%d_m%d_b%d_v%d.mat',isubj,m,iblock,v_grid);
        pars.filt = allpara.filt;
        pars.cs   = cs;
        pars.foi  = [foi_range(ifoi) foi_range(ifoi)];
        
        % get spatial filter as defined elsewhere
        filt      = get_spatfilt(pars);
               
        pars = [];
        
        pars.fsample   = 400;
        pars.segleng   = round(para.segleng(ifoi).*fsample);
        pars.segshift  = round(fsample*para.segleng(ifoi)/2);
        pars.foi       = foi_range(ifoi);
        pars.aal       = 0;    
        pars.epleng    = 10*400;
        pars.epshift   = pars.epleng;
        pars.grid = 'medium';
        
        nep = floor(size(dat,1)/pars.epleng);
        % compute various things here:
        % kura order, pairwise kura, power corr, pupil, 
        for iep = 1 : nep
          
          timerange             = [(iep-1)*pars.epshift+1 (iep-1)*pars.epshift+pars.epleng];
          pup_dat               = pup.dil(timerange(1):timerange(2));
          tmp_dat               = dat(timerange(1):timerange(2),:);       
          tmp_powcorr           = tp_powcorr_ortho(tmp_dat,pars,filt,filt);
          par.powcorr(:,:,iep)  = tp_match_aal(pars,tmp_powcorr);
          par.pup(:,iep)        = mean(pup_dat);
          
          
        end
        
        clear mydata dat
        
        save(sprintf([outdir 'pupmod_src_powcorr_pup_s%d_b%d_m%d_f%d_v%d.mat'],isubj,iblock,m,ifoi,v),'par','-v7.3');
        
        clear par
        
      end
      
    end
  end
end

error('STOP')

