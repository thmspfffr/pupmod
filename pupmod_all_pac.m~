% Compute PAC on pharmadata


v               = 1;
fsample         = 400;
SUBJLIST        = [4 5 6 7 8 9 10 11 12 13 15 16 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34];

low_freqs = 3:1:16;

high_freqs = 40:2:80;




outdir   = '/home/tpfeffer/pupmod/proc/pac/';

%%


for isubj = SUBJLIST
  for m = 1 : 3
    for ilowf = 1:length(low_freqs)
      
      if ~exist(sprintf([outdir 'pupmod_task_src_powcorr_s%d_m%d_lf%d_v%d_processing.txt'],isubj,m,ilowf,v))
        system(['touch ' outdir sprintf('pupmod_task_src_powcorr_s%d_m%d_lf%d_v%d_processing.txt',isubj,m,ilowf,v)])
      else
        continue
      end
      %
      for ihighf = 1:length(high_freqs)
        
        hf = [high_freqs(ihighf)-low_freqs(ilowf) high_freqs(ihighf)+low_freqs(ilowf)];
        lf = [low_freqs(ilowf)-1 low_freqs(ilowf)+1];
        
        para.ord = 4;
        delt = 1/fsample;            % sampling interval
        k=4;                  % 2nd order butterworth filter
        fnq=1/(2*delt);       % Nyquist frequency
        
        % low frequencies
        Wn=[lf(1)/fnq lf(2)/fnq]; % butterworth bandpass non-dimensional frequency
        [bfilt,afilt]=butter(k,Wn);
        
        % high frequencies
        Wn=[hf(1)/fnq hf(2)/fnq]; % butterworth bandpass non-dimensional frequency
        [bfilt,afilt]=butter(k,Wn);
        
        fprintf('Processing s%d m%d f%d ...\n', isubj,m,ifoi) 
        
        for iblock = 1:2
          
          fprintf('Loading MEG data ...\n');
          
          try
            load(sprintf('/home/tpfeffer/pconn_cnt/proc/preproc/pconn_cnt_postpostproc_s%d_m%d_b%d_v%d.mat',isubj,m,iblock,1))
          catch me
            if ~exist(sprintf('/home/tpfeffer/pconn_cnt/proc/preproc/pconn_cnt_postpostproc_s%d_m%d_b%d_v%d.mat',isubj,m,iblock,1))
              
              % do stuff
              
              save(sprintf([outdir 'pupmod_task_src_powcorr_s%d_m%d_b%d_f%d_v%d.mat'],isubj,m,iblock,ifoi,v),'powcorr');
              continue
            else
              error('Data corrupt?')
            end
          end
          
          dat_low = angle(hilbert(ft_preproc_bandpassfilter(data.trial{1},400,lf)));
          dat_hi  = abs(hilbert(ft_preproc_bandpassfilter(data.trial{1},400,hf)));
          
          
          
          phase_degrees = dat_low*360./2./pi; % Phases in degrees
          clear dat_low
          n_bins = 18;
          % Bining the phases
          step_length = 360/n_bins;
          phase_bins = -180:step_length:180;
          [~,phase_bins_ind] = histc(phase_degrees,phase_bins);
          clear phase_degrees

          % Averaging amplitude time series over phase bins
          amplitude_bins = zeros(n_chan,n_bins)
          n_chan = size(dat_hi,1);

          for ichan = 1:n_chan
            for bin = 1:n_bins
              amplitude_bins(ichan,bin) = mean(dat_hi(ichan,phase_bins_ind(ichan,:)==bin),2);
            end
          end
          
          % Normalize amplitudes
          P = amplitude_bins./repmat(sum(amplitude_bins,2),1,n_bins);
          % Compute modulation index
          tmp_mi(:,ilowf,iblock) = 1+sum(P.*log(P),2)./log(n_bins);
 
        end
        
        
        
      end
    end
  end
end