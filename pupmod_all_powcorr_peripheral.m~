%% PERMUTATION TEST OF CONNECTIVITY DIFFERENCES WITH CLEANED SIGNAL
% heart beats and blinks projected out of the FC matrices across subjects
% pupmod_all_powcorr_periphereal

% See pupmod_src_powcorr_permtest.m for statistics

clear

% -------------------------------------------------------------------------
% VERSION 01 - ignore saccades, *interpolate* blinks
% -------------------------------------------------------------------------
v = 1;
v_pup = 2;
v_hrv = 1;
% -------------------------------------------------------------------------

tp_addpaths

sampledir_cnt   = '/home/tpfeffer/pconn_cnt/proc/';
eventdir_cnt   = '/home/tpfeffer/pconn_cnt/proc/';
outdir      = '/home/tpfeffer/pconn_cnt/proc/';

sampledir_res   = '/home/tpfeffer/pconn/proc/pup/';
eventdir_res    = '/home/tpfeffer/pconn/proc/pup/';


SUBJLIST    = [4 5 6 7 8 9 10 11 12 13 15 16 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34];
addpath ~/pconn/matlab
%%
% missing blinks are taken from pconn_find_blinks.m

for icond = 1 : 2
  
  ord   = pconn_randomization;
  
  for m = 1:3
    for isubj = SUBJLIST
      im = find(ord(isubj,:)==m);
      
      clear smpdir evtdir
      
      if icond == 1
        smpdir    = dir(sprintf([sampledir_res '*samples*_s%d_*_m%d_*v%d.mat'],isubj,im,v_pup));
        evtdir    = dir(sprintf([eventdir_res '*events*_s%d_*_m%d_*v%d.mat'],isubj,im,v_pup));
      elseif icond == 2
        smpdir    = dir(sprintf([sampledir_cnt '*samples*_s%d_*_m%d_*v%d.mat'],isubj,im,v_pup));
        evtdir    = dir(sprintf([eventdir_cnt '*events*_s%d_*_m%d_*v%d.mat'],isubj,im,v_pup));
      end
      
      if length(evtdir) == 0
        if icond == 1
          load(['~/pconn/proc/preproc/' sprintf('pconn_find_blinks_s%d_m%d_b%d_v%d.mat',isubj,im,1,2)])
          b(isubj,m,icond,1) = blinks;
          allblinks(isubj,m,icond,1) =blinks; clear blinks
          load(['~/pconn/proc/preproc/' sprintf('pconn_find_blinks_s%d_m%d_b%d_v%d.mat',isubj,im,2,2)])
          b(isubj,m,icond,2) = blinks;
          allblinks(isubj,m,icond,2) =blinks; clear blinks
        else
          load(['~/pconn/proc/preproc/' sprintf('pconn_cnt_find_blinks_s%d_m%d_b%d_v%d.mat',isubj,im,1,1)])
          b(isubj,m,icond,1) = blinks;
          allblinks(isubj,m,icond,1) =blinks; clear blinks
          load(['~/pconn/proc/preproc/' sprintf('pconn_cnt_find_blinks_s%d_m%d_b%d_v%d.mat',isubj,im,2,1)])
          b(isubj,m,icond,2) = blinks;
          allblinks(isubj,m,icond,2) =blinks; clear blinks
        end
        warning(sprintf('No files: s%d m%d c%d', isubj,im,icond))
        continue
      end
      
      for iblock = 1 : length(evtdir)
        
        %         clear evtdir
        fprintf('Processing s%d b%d m%d ... \n',isubj,iblock,m)
        
        load([smpdir(iblock).folder '/' smpdir(iblock).name])
        load([evtdir(iblock).folder '/' evtdir(iblock).name])
        blinks1 = blinks;
        
        if icond == 1
          if isubj < 10
            block = str2num(evtdir(iblock).name(22));
          else
            block = str2num(evtdir(iblock).name(23));
          end
        else
          if isubj < 10
            block = str2num(evtdir(iblock).name(26));
          else
            block = str2num(evtdir(iblock).name(27));
          end
        end
        
        if length(evtdir) == 1
          
          if block == 1
            if icond == 1
              load(['~/pconn/proc/preproc/' sprintf('pconn_find_blinks_s%d_m%d_b%d_v%d.mat',isubj,im,2,2)])
            else
              load(['~/pconn/proc/preproc/' sprintf('pconn_cnt_find_blinks_s%d_m%d_b%d_v%d.mat',isubj,im,2,1)])
            end
            
            b(isubj,m,icond,2) = blinks;
            allblinks(isubj,m,icond,2) = blinks; clear blinks
            
            warning(sprintf('Missing block: s%d m%d b%d c%d', isubj,im,2,icond))
          else
            if icond == 1
              load(['~/pconn/proc/preproc/' sprintf('pconn_find_blinks_s%d_m%d_b%d_v%d.mat',isubj,im,1,2)])
            else
              load(['~/pconn/proc/preproc/' sprintf('pconn_cnt_find_blinks_s%d_m%d_b%d_v%d.mat',isubj,im,1,1)])
            end
            b(isubj,m,icond,1) = blinks;
            allblinks(isubj,m,icond,1) = blinks; clear blinks
            warning(sprintf('Missing block: s%d m%d b%d c%d', isubj,im,1,icond))
          end
        end
        
        if isubj == 26 && im == 1
          samples(:,2:4) = dat(:,1:3);
        end
        
        if size(samples,1) > 10000
          samples = samples(10000:end,:);
          x = highpass(samples(:,4),50,1000);
          x(x<50) = 0;
          %           x       = -(zscore(diff(samples(:,4))));
          [~,idx] = findpeaks(double(x),'MinPeakDistance',500);
          
          allblinks(isubj,m,icond,block) = length(idx);
          
        else
          
          allblinks(isubj,m,icond,block) = nan;
        end
        
        try
          b(isubj,m,icond,block)         = sum(blinks1(:,2)>samples(1,1)); clear blinks1
          
        catch me
          b(isubj,m,icond,block)         = nan;
        end
        
      end
    end
  end
end

allblinks = allblinks(SUBJLIST,:,:,1:2);
b         = b(SUBJLIST,:,:,1:2);

%% MISSING HEART RATE INFO TAKEN FROM ICA COMPONENTS
% see pconn_hrv_fromica.m for details (same adaptivethresholding procedure
% is applied)

clear hb_all hb_cnt

for isubj = SUBJLIST
  
  for m = 1 : 3
    for ibl = 1 : 2
      
      try
        im = find(ord(isubj,:)==m);
        load(['~/pconn/proc/dfa/' sprintf('pconn_hrv_dfa_s%d_m%d_b%d_v%d.mat',isubj,im,ibl,v_hrv)]);
        hb_all(isubj,m,ibl) = par.hb;
        
      catch me
        try
          load(sprintf('~/pconn/proc/pconn_hrv_fromica_s%d_m%d_b%d.mat',isubj,im,ibl),'par')
          hb_all(isubj,m,ibl) = par;
        catch me
          hb_all(isubj,m,ibl) = nan;
          warning(sprintf('Did not find REST data: s%d m%d ibl%d',isubj,im,ibl))
          
        end
      end
      
      try
        
        load(['~/pconn/proc/dfa/' sprintf('pconn_cnt_hrv_dfa_s%d_m%d_b%d_v%d.mat',isubj,im,ibl,v_hrv)]);
        
        hb_cnt(isubj,m,ibl) = par.hb;
        
      catch me
        try
          load(sprintf('~/pconn_cnt/proc/pconn_cnt_hrv_fromica_s%d_m%d_b%d.mat',isubj,im,ibl),'par')
          hb_cnt(isubj,m,ibl) = par;
        catch me
          hb_cnt(isubj,m,ibl) = nan;
          warning(sprintf('Did not find TASK data: s%d m%d ibl%d',isubj,im,ibl))
        end
      end
      
      
    end
  end
end

clear hb

hb_all  = hb_all(SUBJLIST,:,:);
hb_all_cnt  = hb_cnt(SUBJLIST,:,:);

hb_all(hb_all==0) = NaN;
hb_all_cnt(hb_all_cnt==0) = NaN;

hb(:,:,1,:)  = squeeze(hb_all);
hb(:,:,2,:)  = squeeze(hb_all_cnt);

%% OTHER ARTIFACTS
for isubj = SUBJLIST
  isubj
  for m = 1 : 3
    im = find(ord(isubj,:)==m);
    for ibl = 1 : 2
      try
        load(['/home/tpfeffer/pconn/proc/preproc/' sprintf('pconn_preproc_artvec_s%d_m%d_b%d_v%d.mat',isubj,im,ibl,1)])
        artcnt(isubj,m,1,ibl) = size(art,1);
        artlen(isubj,m,1,ibl) = mean(art(:,2)-art(:,1));
      catch me
        try
          load(['/home/tpfeffer/pconn/proc/preproc/' sprintf('pconn_preproc_artvec_s%d_m%d_b%d_v%d.mat',isubj,im,ibl,2)])
          artcnt(isubj,m,1,ibl) = size(art,1);
          artlen(isubj,m,1,ibl) = mean(art(:,2)-art(:,1));
        catch
          artcnt(isubj,m,1,ibl) = nan;
          artlen(isubj,m,1,ibl) = nan;
        end
      end
      
    end
  end
  for m = 1 : 3
    im = find(ord(isubj,:)==m);
    for ibl = 1 : 2
      try
        load(['/home/tpfeffer/pconn_cnt/proc/preproc/' sprintf('pconn_cnt_preproc_artvec_s%d_m%d_b%d_v%d.mat',isubj,im,ibl,1)])
        artcnt(isubj,m,2,ibl) = size(art,1);
        artlen(isubj,m,2,ibl) = mean(art(:,2)-art(:,1));
      catch me
        try
          load(['/home/tpfeffer/pconn_cnt/proc/preproc/' sprintf('pconn_cnt_preproc_artvec_s%d_m%d_b%d_v%d.mat',isubj,im,ibl,1)])
          artcnt(isubj,m,2,ibl) = size(art,1);
          artlen(isubj,m,2,ibl) = mean(art(:,2)-art(:,1));
        catch
          artcnt(isubj,m,2,ibl) = nan;
          artlen(isubj,m,2,ibl) = nan;
        end
      end
    end
  end
end

artcnt= artcnt(SUBJLIST,:,:,:);
% artlen= nanmean(artlen(SUBJLIST,:,:,:),4);
%%
clear p1 p2
v = 12;

outdir = '~/pupmod/proc/conn/';
s_fc = zeros(400,400,34,3,2,13,2,'single');
% s_fc = single(zeros(91,91,34,3,2,13,2));
% s_fc = single(zeros(  378 ,  378 ,34,3,2,13));

for ifoi = 1:13
  ifoi
  
  for isubj = SUBJLIST
    %     disp(isubj)
    for m = 1 : 3
      
      im = find(ord(isubj,:)==m);
      
      for iblock = 1 : 2
        clear tmp
        load(sprintf([outdir 'pupmod_src_powcorr_s%d_m%d_b%d_f%d_v%d.mat'],isubj,im,iblock,ifoi,v));
        
        p1(:,:,iblock) = single(powcorr);
        
        load(sprintf([outdir 'pupmod_task_src_powcorr_s%d_m%d_b%d_f%d_v%d.mat'],isubj,im,iblock,ifoi,v));
        p2(:,:,iblock) = single(powcorr);
        %      s_fc = nanmean(s_fc,7);
      end
      
      s_fc(:,:,isubj,m,1,ifoi,:) = single(p1);
      s_fc(:,:,isubj,m,2,ifoi,:) = single(p2);
      
      clear p1 p2
      
    end
  end
end

if size(s_fc,1)<100
  s_fc = s_fc(1:90,1:90,SUBJLIST,:,:,:,:);
elseif size(s_fc,1)>380
  s_fc = s_fc(1:400,1:400,SUBJLIST,:,:,:,:);
  
end
% s_fc = nanmean(s_fc,7);
error('!')
%%
% b = nanmean(b,4);

% nuisance_var = [zscore(hb(:)) zscore(b(:)) zscore(artcnt(:))];

cleandat = zeros(400,400,28,3,2,13,'single');

for ifoi = 6
  ifoi
  for isubj = 1 : 28
    isubj
    siz = size(squeeze(s_fc(1,1,isubj,:,:,ifoi,:)));
    
    bb = (reshape(b(isubj,:,:,:),[prod(siz) 1])-nanmean(reshape(b(isubj,:,:,:),[prod(siz) 1])))/nanstd(reshape(b(isubj,:,:,:),[prod(siz) 1]));
    hh = (reshape(hb(isubj,:,:,:),[prod(siz) 1])-nanmean(reshape(hb(isubj,:,:,:),[prod(siz) 1])))/nanstd(reshape(hb(isubj,:,:,:),[prod(siz) 1]));
    aa = (reshape(artcnt(isubj,:,:,:),[prod(siz) 1])-nanmean(reshape(artcnt(isubj,:,:,:),[prod(siz) 1])))/nanstd(reshape(artcnt(isubj,:,:,:),[prod(siz) 1]));

    nuisance_var = [bb hh aa];
    
    for i = 1 : size(s_fc,1)
      for j = 1 : size(s_fc,1)

        dat = reshape(squeeze(s_fc(i,:,isubj,:,:,ifoi,:)),[prod(siz) 1]);
        
        if ~any(isnan(dat))
          [~,~,dat]=regress(dat,[nuisance_var]);
        else
          idx = find(isnan(dat));
          [~,~,dat(~isnan(dat))]=regress(dat(~isnan(dat)),nuisance_var(~isnan(dat),:));
        end
        
        cleandat(i,j,isubj,:,:,ifoi,:) = nanmean(reshape(dat,siz),3);
      
      end
    end
  end
end

if size(cleandat,1)==91
  cleandat=cleandat(1:90,1:90,:,:,:,:,:);
end

%%

clear p_atx n_atx p_dpz n_dpz
% cleandat = nanmean(cleandat,7);

siz = 400;
for ifoi = 1:13
  ifoi
  for icont = 1 : 2
    
    
    [h,~,~,t]=ttest(s_fc(:,:,:,2,icont,ifoi,2),s_fc(:,:,:,1,icont,ifoi,2),'dim',3);
    
    p_atx(ifoi,icont) = sum(nansum((sign(t.tstat)>0).*h))/(siz*siz-siz);
    n_atx(ifoi,icont) = sum(nansum((sign(t.tstat)<0).*h))/(siz*siz-siz);
    
    [h,~,~,t]=ttest(s_fc(:,:,:,3,icont,ifoi,2),s_fc(:,:,:,1,icont,ifoi,2),'dim',3);
    
    p_dpz(ifoi,icont) = sum(nansum((sign(t.tstat)>0).*h))/(siz*siz-siz);
    n_dpz(ifoi,icont) = sum(nansum((sign(t.tstat)<0).*h))/(siz*siz-siz);
    
  end
end

%%
foi_range       = unique(round(2.^[1:.5:7]));

figure; set(gcf,'color','w');

subplot(2,2,1); hold on
plot(p_atx(:,1),'r');
plot(n_atx(:,1),'b');
axis([0 14 0 0.5])
set(gca,'XTick',[1:2:13],'XTickLabel',[foi_range(1:2:13)])
ylabel('Fraction of altered correlations [%]')
tp_editplots
subplot(2,2,2); hold on
plot(p_atx(:,2),'r');
plot(n_atx(:,2),'b');
axis([0 14 0 0.5])
set(gca,'XTick',[1:2:13],'XTickLabel',[foi_range(1:2:13)])
tp_editplots
subplot(2,2,3); hold on
plot(p_dpz(:,1),'r');
plot(n_dpz(:,1),'b');
axis([0 14 0 0.5])
set(gca,'XTick',[1:2:13],'XTickLabel',[foi_range(1:2:13)])
xlabel('Carrier frequency [Hz]')
ylabel('Fraction of altered correlations [%]')
tp_editplots
subplot(2,2,4); hold on
plot(p_dpz(:,2),'r');
plot(n_dpz(:,2),'b');
axis([0 14 0 0.5])

set(gca,'XTick',[1:2:13],'XTickLabel',[foi_range(1:2:13)])
xlabel('Carrier frequency [Hz]')
tp_editplots

%%

figure;

subplot(1,2,1); hold on

m = mean(b(:,:,1));
s = std(b(:,:,1),[],1)/sqrt(28);
bar([1 2 3],m)
line([1 1; 2 2; 3 3]',[m(1)-s(1) m(1)+s(1);m(2)-s(2) m(2)+s(2);m(3)-s(3) m(3)+s(3)]','color','k')
axis square
set(gca,'XTick',1:3,'xTicklabel',{'PBO', 'ATX','DPZ'})
ylabel('Number of blinks')
subplot(1,2,2); hold on

m = mean(b(:,:,2));
s = std(b(:,:,2),[],1)/sqrt(28);
bar([1 2 3],m)
line([1 1; 2 2; 3 3]',[m(1)-s(1) m(1)+s(1);m(2)-s(2) m(2)+s(2);m(3)-s(3) m(3)+s(3)]','color','k')
axis square
set(gca,'XTick',1:3,'xTicklabel',{'PBO', 'ATX','DPZ'})
ylabel('Number of blinks')
%%

% load('~/cleandat_2arts_v12.mat')

cmap = cbrewer('div', 'RdBu', 256,'pchip');
cmap = cmap(end:-1:1,:);

figure; set(gcf,'color','w');

par = squeeze(nanmean(cleandat(:,:,:,3,1,7),3))-squeeze(nanmean(cleandat(:,:,:,1,1,7),3));
subplot(2,2,1);
imagesc(par,[-0.02 0.02]); axis square; colormap(cmap)

par = squeeze(nanmean(cleandat(:,:,:,3,2,7),3))-squeeze(nanmean(cleandat(:,:,:,1,2,7),3));
subplot(2,2,2);
imagesc(par,[-0.02 0.02]); axis square; colormap(cmap)

par = ttest(cleandat(:,:,:,3,1,7),cleandat(:,:,:,1,1,7),'dim',3);
subplot(2,2,3);
imagesc(par,[-0.02 0.02]); axis square; colormap(cmap)

par = ttest(cleandat(:,:,:,3,2,7),cleandat(:,:,:,1,2,7),'dim',3);
subplot(2,2,4);
imagesc(par,[-0.02 0.02]); axis square; colormap(cmap)

% print(gcf,'-dpng',sprintf('~/pupmod/plots/pupmod_degree_%s_c%d_f%d.png',idrug,icond,ifoi))
%% CORRELATE FC AND ARTIFACTS
%
% for i = 1 : size(s_fc,1)
%   for j = 1 : size(s_fc,1)
%
%     for


%% LINEAR PROJECTION: Legacy code
%
% for icont = 1 : 2
%   for im = 1 : 3
%     for ifoi = 1:13
%       for i = 1 : size(s_fc,1)
%         fprintf('Cond %d Session %d freq %d node %d...\n',icont,im,ifoi,i)
%         for j = 1 : size(s_fc,1)
%
%           dat = atanh(squeeze(s_fc(i,j,:,im,icont,ifoi)))-mean(atanh(squeeze(s_fc(i,j,:,im,icont,ifoi))));
%           x   = zscore(hb(:,im,icont));
%           ref = x./norm(x);
%
%
%           cleandattmp = (dat - (dat'*ref)*ref)+mean(atanh(squeeze(s_fc(i,j,:,im,icont,ifoi))));
%           corr(cleandattmp,x);
%           clear dat x ref
%
%           dat = cleandattmp-mean(cleandattmp);
%           x   = zscore(b(:,im,icont));
%           ref = x./norm(x);
%
%           cleandat(i,j,:,im,icont,ifoi) = tanh((dat - (dat'*ref)*ref)+mean(cleandattmp));
%
%         end
%       end
%     end
%   end
% end
%
% if size(cleandat,1)==91
%   cleandat=cleandat(1:90,1:90,:,:,:,:);
% end
%
% clear s_fc;
%
%
%% PLOT CORRELATIONS

